{"name":"Windflo","tagline":"APIs for the Wind Farm Layout Optimization competition","body":"WindFLO\r\n=======\r\n\r\nAPIs for the Wind Farm Layout Optimization competition\r\n\r\n## Intent\r\n\r\nThese APIs are for the GECCO 2015 [Wind Farm Layout Optimization Competition](http://www.irit.fr/wind-competition/). Competitors are expected to use these\r\nfunctions to determine the fitness of the layouts they are optimizing. All APIs\r\nkeep a running count of the number of evaluations made, which will be used in\r\nthe comparison of competing algorithms. We hope competitors will find these\r\nAPIs useful and clear.\r\n\r\n## Basic Interface\r\n\r\n### Methods\r\n\r\nBetween the C++, Java, and MATLAB implementations, the basic operation is the\r\nsame and consists of only two main methods:\r\n\r\n* *Initialize/construct:* The evaluator class must be constructed and\r\n  initialized with a wind scenario number. We have provided 20 sample\r\n  Scenarios, which can be found in\r\n  [Scenarios](https://github.com/d9w/WindFLO/tree/master/Scenarios), the latter\r\n  10 of which are the same as the first 10 with the addition of two obstacles.\r\n\r\n* *Evaluate:* This method takes a layout as an n-by-2 matrix, where n is the\r\n  number of turbines, and the columns represent the x and y coordinates of each\r\n  turbine, respectively. This method returns the energy cost in Java and C++,\r\n  sets all variables, and updates the evaluation count.\r\n\r\n### Variables\r\n\r\nUsers have read access to the following variables without increasing the\r\nevaluation count. All variables are updated by the evaluator class:\r\n\r\n* *Energy cost:* The cost of energy in the layout, balancing turbine costs and\r\n  energy capture. More on this function can be viewed at the [competition\r\n  site](http://www.irit.fr/wind-competition/). This is the 2015 competition\r\n  fitness, and it should be minimized.\r\n\r\n* *Wake free ratio:* a value between 0 and 1 representing the energy capture of\r\n  the field over the theoretical energy capture of the same number of turbines\r\n  without any inter-turbine wake. If any of the turbines are within 8 radii of\r\n  each other, given as R in the wind scenarios and here a set value of 38.5m,\r\n  the layout will be considered invalid and the wake free ratio will be\r\n  negative.\r\n\r\n* *Energy output:* the energy capture of the entire field in kWh.\r\n\r\n* *Turbine Fitnesses:* the wake free ratio for each turbine. This is an n-by-1\r\n  matrix with the same turbine order as the input to the evaluate method.\r\n\r\n* *Energy outputs:* the energy at each turbine location in 24 directional bins.\r\n  As can be seen in the wind scenario files, the wind distribution is split up\r\n  over 24 directional bins. This n-by-24 matrix gives the energy capture of\r\n  each turbine location, in the same order as the input to the evaluate method,\r\n  for each of the 24 directional bins.\r\n\r\n* *Number of evaluations:* the number of times the evaluate method has been\r\n  called so far.\r\n\r\n## 2015 Leaderboard\r\n\r\nA live leaderboard is available at [windflo.com](http://windflo.com/), and the\r\ncompetition evaluator classes use this server to evaluate layouts. Examples are\r\nprovided in the GA files, using example user tokens. To compete on the\r\nleaderboard, use the competition evaluator classes with your own user API\r\ntoken, which is available on the [user page](http://windflo.com/user/) after\r\n[registration](http://windflo.com/register).\r\n\r\n## Running the examples\r\n\r\nAll examples expect the scenario files in the current directory structure, and\r\nwhile you can change this, to make the examples work, you must\r\n\r\n```\r\n$ git clone https://github.com/d9w/WindFLO\r\n$ cd WindFLO\r\n```\r\n\r\n## C++\r\n\r\nThe C++ interface is displayed in `main.cpp` and `GA.cpp`. To compile and run\r\nusing gcc, a makefile has been provided. We are still working on the\r\nexpectations for C++ submissions, but expect to build your algorithm with a\r\nmakefile similar to this one. The example GA can be run using (from the WindFLO\r\ndirectory):\r\n\r\n```Bash\r\n$ cd c++\r\n$ make\r\n$ ./eval.o\r\n```\r\n\r\n## Java\r\n\r\nThe Java interface is displayed in `main.java` and `GA.java`. To compile and\r\nrun using Java v6, use (from WindFLO directory):\r\n\r\n```Bash\r\n$ cd Java\r\n$ javac main.java\r\n$ java main\r\n```\r\n\r\n## MATLAB\r\n\r\nThe MATLAB interface is displayed in `main.m` and `GA.m`. `main.m` can be\r\nexecuted in the MATLAB environment if the current directory is\r\n`WindFLO/MATLAB`:\r\n\r\n```Matlab\r\n>> cd MATLAB\r\n>> main\r\n```\r\n\r\n## Questions, comments, bugs\r\n\r\nWe are continuously working on the competition software as we work on the\r\nautomated submission and leaderboard system. If you would like to contact us\r\nconcerning the APIs, please email us. Our emails can be found on the\r\n[competition site](http://www.irit.fr/wind-competition/).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}